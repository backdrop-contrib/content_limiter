<?php
/**
 * @file
 * Allows for limiting the total amount of nodes and gradual reduction.
 */


/**
 * Implements hook_config_info().
 */
function content_limiter_config_info() {
  return array(
    'content_limiter.settings' => array(
    'label' => t('Content Limiter settings'),
    'group' => t('Configuration'),
  ),
  );
}


/**
 * Implements hook_permission().
 */
function content_limiter_permission() {
  return array(
    'access content_limiter settings' => array(
    'title' => t('Administer content limiter settings'),
  ),
  );
}


/**
 * Implements hook_menu().
 */
function content_limiter_menu() {
  return array(
    'admin/config/content/content-limiter' => array(
    'title' => 'Content Limiter',
    'description' => 'Configure global settings for content limiter.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('content_limiter_settings'),
    'access arguments' => array('access content_limiter settings'),
    'file' => 'content_limiter.admin.inc',
  ),
  );
}


/**
 * Implements hook_form_alter().
 */
function content_limiter_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'node') {
    $config = config('content_limiter.settings');
    if (isset($form['type']['#value'])) {
      $type = $form['type']['#value'];
      $detect_limiting = $config->get('cl_' . $type);
      if ($detect_limiting == 1) {
        $counter = db_query("SELECT count(nid) FROM {node} WHERE type='$type' AND status=1")->fetchField(); // total node count
        $limit = $config->get('cl_limit_' . $type);
        $warning = $config->get('cl_warning');
        if ($counter >= $limit && $warning == 1) {
          backdrop_set_message(t('Content limiting detected (' . $counter . '/' . $limit . '). A node will be deleted upon saving.'), 'warning');
        }
      }
    }
  }
}


/**
 * Implements form_node_type_form_alter
 */
function content_limiter_form_node_type_form_alter(&$form, &$form_state) {
  $default_value = config_get('content_limiter.settings', 'cl_' . $form['#node_type']->type);
  $form['content_limiter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content limiting'),
    '#weight' => 0,
    '#collapsible' => TRUE,
    '#collapsed' => !$default_value,
    '#group' => 'additional_settings',
  );
  $form['#config'] = 'content_limiter.settings';
  $form['content_limiter']['cl'] = array(
    '#type' => 'checkbox',
    '#default_value' => config_get('content_limiter.settings', 'cl_' . $form['#node_type']->type),
    '#title' => t('Enable active content limiting'),
    '#description' => t('Enable to enforce the maximum pieces of content to be retained.'),
    '#options' => array(
      t('Disabled'),
      t('Automatically generate the title and hide the title field'),
    ),
  );
  $form['content_limiter']['cl_limit'] = array(
    '#type' => 'number',
    '#size' => 80,
    '#title' => t('Maximum pieces of content to retain'),
    '#description' => t('Upon reaching the limit new pieces of content saved will result in deletion of the necessary amount to enforce the limit.<br><br><strong>Warning:</strong> Deleting many pieces of content may affect system performance.</strong>'),
    '#default_value' => config_get('content_limiter.settings', 'cl_limit_' . $form['#node_type']->type),
  );
  $form['#submit'][] = 'content_limiter_node_type_form_submit';
}


function content_limiter_node_type_form_submit(&$form, &$form_state) {
  $config = config('content_limiter.settings');
  $config->set('cl_' . $form_state['values']['type'], $form_state['values']['cl']);
  $config->set('cl_limit_' . $form_state['values']['type'], $form_state['values']['cl_limit']);
  $config->save();
}

function content_limiter_node_presave($node) {
  $config = config('content_limiter.settings');
  $type = $node->type;
  $limit = $config->get('cl_limit_' . $type);
  $enabled = $config->get('cl_' . $type);
  $disable_limiting = $config->get('disable_limiting');
  $max_deletion = $config->get('cl_max_deletion');
  $max_deletion = $max_deletion + 1; // offset for proper quantity to delete
  $enable_logging = $config->get('cl_logging');
  $enable_message = $config->get('cl_message');

  if ($disable_limiting !=1 && $enabled == 1 && $limit > 0) {
    if (!isset($node->nid)) { // make sure node is new
        $limit = $limit -1; // offset the new node so max possible is the limit
        $counter = db_query("SELECT count(nid) FROM {node} WHERE type='$type' AND status=1")->fetchField(); // total node count
        if ($counter > $limit) {
          $delete_quantity = $counter - $limit; // quantity to delete
          if ($delete_quantity > $max_deletion) {
            $delete_quantity = $max_deletion;
          }
          $nodes = node_load_multiple(array(), array('type' => $type)); // array of nodes of type
          $nodes_delete = array_slice($nodes, 0, $delete_quantity); // array of nodes to delete
          foreach ($nodes_delete as $delete_node) {
            $delete_nids[] = $delete_node->nid;
          }
          node_delete_multiple($delete_nids);
          if ($enable_logging == 1) {
            watchdog('content', $delete_quantity . ' ' . $type . ' nodes deleted by content limiter.');
          }
          if ($enable_message == 1) {
            backdrop_set_message(t('Content limiting detected (' . $delete_quantity . ' deleted)'), 'warning');
          }
          file_put_contents('filename.txt', print_r($delete_nids, true));
        }
      }
  }
}
